import React, { useMemo } from 'react';
import { Story } from '../types';
import { getAnalyticsService, WritingStats } from '../services/analyticsService';
import { CheckCircleIcon, ExclamationCircleIcon } from './icons';

interface WritingStatsDashboardProps {
  story?: Story;
  className?: string;
}

export const WritingStatsDashboard: React.FC<WritingStatsDashboardProps> = ({
  story,
  className = ''
}) => {
  const analyticsService = getAnalyticsService();

  const stats: WritingStats = useMemo(() => {
    return analyticsService.getWritingStats(story);
  }, [story, analyticsService]);

  const formatDuration = (minutes: number): string => {
    if (minutes < 60) return `${Math.round(minutes)} ph√∫t`;
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = Math.round(minutes % 60);
    return `${hours}h${remainingMinutes > 0 ? ` ${remainingMinutes}m` : ''}`;
  };

  const formatLastActivity = (timestamp: number): string => {
    if (timestamp === 0) return 'Ch∆∞a vi·∫øt g√¨';

    const now = Date.now();
    const diffMs = now - timestamp;
    const diffHours = diffMs / (1000 * 60 * 60);

    if (diffHours < 1) return 'M·ªõi ƒë√¢y';
    if (diffHours < 24) return `${Math.floor(diffHours)} gi·ªù tr∆∞·ªõc`;

    const diffDays = Math.floor(diffHours / 24);
    if (diffDays === 1) return 'H√¥m qua';
    if (diffDays < 7) return `${diffDays} ng√†y tr∆∞·ªõc`;

    const diffWeeks = Math.floor(diffDays / 7);
    if (diffWeeks === 1) return 'Tu·∫ßn tr∆∞·ªõc';
    if (diffWeeks < 4) return `${diffWeeks} tu·∫ßn tr∆∞·ªõc`;

    const diffMonths = Math.floor(diffDays / 30);
    if (diffMonths === 1) return 'Th√°ng tr∆∞·ªõc';
    return `${diffMonths} th√°ng tr∆∞·ªõc`;
  };

  const formatHour = (hour: number): string => {
    if (hour === 0) return 'N·ª≠a ƒë√™m';
    if (hour < 12) return `${hour} gi·ªù s√°ng`;
    if (hour === 12) return 'Tr∆∞a';
    if (hour < 18) return `${hour - 12} gi·ªù chi·ªÅu`;
    return `${hour - 12} gi·ªù t·ªëi`;
  };

  const getProductivityLevel = (wordsPerHour: number): { level: string; color: string; icon: string } => {
    if (wordsPerHour >= 1000) return { level: 'Si√™u nƒÉng su·∫•t', color: 'text-purple-600', icon: 'üöÄ' };
    if (wordsPerHour >= 500) return { level: 'NƒÉng su·∫•t cao', color: 'text-blue-600', icon: 'üíô' };
    if (wordsPerHour >= 200) return { level: 'NƒÉng su·∫•t‰∏≠Á≠â', color: 'text-green-600', icon: '‚úÖ' };
    if (wordsPerHour >= 50) return { level: 'B·∫Øt ƒë·∫ßu t·ªët', color: 'text-yellow-600', icon: 'üå±' };
    return { level: 'ƒêang h·ªçc h·ªèi', color: 'text-gray-600', icon: 'üìö' };
  };

  const productivity = getProductivityLevel(stats.wordsPerHour);

  const statCards = [
    {
      icon: <span className="text-xl">üìö</span>,
      title: 'T·ªïng s·ªë t·ª´',
      value: stats.totalWords.toLocaleString(),
      subtitle: 'ƒë√£ vi·∫øt',
      color: 'text-blue-600',
      bgColor: 'bg-blue-50 dark:bg-blue-950/20',
    },
    {
      icon: <span className="text-xl">‚ö°</span>,
      title: 'T·ª´/zgi·ªù',
      value: Math.round(stats.wordsPerHour).toLocaleString(),
      subtitle: `${productivity.icon} ${productivity.level}`,
      color: productivity.color,
      bgColor: 'bg-purple-50 dark:bg-purple-950/20',
    },
    {
      icon: <span className="text-xl">‚è∞</span>,
      title: 'Th·ªùi gian vi·∫øt',
      value: formatDuration(stats.totalWritingTime),
      subtitle: `${stats.sessionsCount} phi√™n l√†m vi·ªác`,
      color: 'text-green-600',
      bgColor: 'bg-green-50 dark:bg-green-950/20',
    },
    {
      icon: <span className="text-xl">üìÖ</span>,
      title: 'Chu·ªói ng√†y',
      value: stats.streakDays.toString(),
      subtitle: stats.streakDays === 1 ? 'ng√†y li√™n ti·∫øp' : 'ng√†y li√™n ti·∫øp',
      color: 'text-orange-600',
      bgColor: 'bg-orange-50 dark:bg-orange-950/20',
    },
  ];

  return (
    <div className={`space-y-6 ${className}`}>
      <div className="text-center">
        <h2 className="text-2xl font-bold text-foreground mb-2">Th·ªëng k√™ vi·∫øt truy·ªán</h2>
        <p className="text-muted-foreground">
          Theo d√µi ti·∫øn ƒë·ªô v√† hi·ªáu su·∫•t vi·∫øt c·ªßa b·∫°n
        </p>
      </div>

      {/* Main Stats Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {statCards.map((card, index) => (
          <div
            key={index}
            className={`${card.bgColor} rounded-lg p-4 border transition-all hover:shadow-md`}
          >
            <div className="flex items-center gap-3 mb-2">
              <div className={`${card.color} p-2 rounded-lg bg-white/50 dark:bg-black/20`}>
                {card.icon}
              </div>
              <div>
                <p className="text-sm font-medium text-muted-foreground">{card.title}</p>
                <p className={`text-2xl font-bold ${card.color}`}>{card.value}</p>
              </div>
            </div>
            <p className="text-xs text-muted-foreground">{card.subtitle}</p>
          </div>
        ))}
      </div>

      {/* Additional Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="bg-card rounded-lg p-4 border">
          <h3 className="font-semibold text-foreground mb-3 flex items-center gap-2">
            <span className="text-lg">üìà</span>
            Chi ti·∫øt hi·ªáu su·∫•t
          </h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">S·ªë phi√™n l√†m vi·ªác:</span>
              <span className="font-medium">{stats.sessionsCount}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">Th·ªùi gian trung b√¨nh m·ªói phi√™n:</span>
              <span className="font-medium">{formatDuration(stats.averageSessionDuration)}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">Gi·ªù vi·∫øt y√™u th√≠ch:</span>
              <span className="font-medium">{formatHour(stats.favoriteWritingHour)}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">Ho·∫°t ƒë·ªông cu·ªëi:</span>
              <span className="font-medium">{formatLastActivity(stats.lastActivity)}</span>
            </div>
          </div>
        </div>

        <div className="bg-card rounded-lg p-4 border">
          <h3 className="font-semibold text-foreground mb-3">M·ª•c ti√™u h·∫±ng ng√†y</h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-sm">T·ª´/ng√†y (500 t·ª´)</span>
              <div className="flex items-center gap-2">
                <div className="w-24 h-2 bg-muted rounded-full overflow-hidden">
                  <div
                    className="h-full bg-blue-500 rounded-full"
                    style={{ width: `${Math.min((stats.totalWords / stats.streakDays) / 500 * 100, 100)}%` }}
                  />
                </div>
                <span className="text-xs font-medium">
                  {stats.streakDays > 0 ? Math.round(stats.totalWords / stats.streakDays) : 0}
                </span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm">Phi√™n/th√°ng (12 phi√™n)</span>
              <div className="flex items-center gap-2">
                <div className="w-24 h-2 bg-muted rounded-full overflow-hidden">
                  <div
                    className="h-full bg-green-500 rounded-full"
                    style={{ width: `${Math.min(stats.sessionsCount / 12 * 100, 100)}%` }}
                  />
                </div>
                <span className="text-xs font-medium">{stats.sessionsCount}</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <span className="text-sm">Th·ªùi gian/th√°ng (20h)</span>
              <div className="flex items-center gap-2">
                <div className="w-24 h-2 bg-muted rounded-full overflow-hidden">
                  <div
                    className="h-full bg-purple-500 rounded-full"
                    style={{ width: `${Math.min(stats.totalWritingTime / 60 / 20 * 100, 100)}%` }}
                  />
                </div>
                <span className="text-xs font-medium">
                  {Math.round(stats.totalWritingTime / 60)}h
                </span>
              </div>
            </div>
          </div>

          <div className="mt-4 pt-3 border-t">
            <p className="text-xs text-muted-foreground text-center">
              Ti·∫øp t·ª•c ph√°t huy phong ƒë·ªô! üéØ
            </p>
          </div>
        </div>
      </div>

      {stats.totalWords === 0 && (
        <div className="text-center py-8 text-muted-foreground">
          <span className="text-4xl mx-auto mb-3 opacity-50" role="img" aria-label="s√°ch">üìñ</span>
          <h3 className="font-medium mb-2">B·∫Øt ƒë·∫ßu h√†nh tr√¨nh vi·∫øt c·ªßa b·∫°n</h3>
          <p className="text-sm">
            Th·ªëng k√™ c·ªßa b·∫°n s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y sau nh·ªØng d√≤ng ƒë·∫ßu ti√™n
          </p>
        </div>
      )}
    </div>
  );
};
